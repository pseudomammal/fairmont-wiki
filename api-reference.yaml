- title: Core
  module: fairmont-core
  description: >-
    The core functions are functions that provide the functional programming glue for JavaScript. Includes support for currying, partial application, and composition of functions.

  content:

    - title: ~
      description: ~
      content:

      - title: noOp
        taking: "`variadic/any`"
        returning: "`undefined`"
        description: >-
          Does nothing. Mostly useful with combinators to express the
          equivalent of an empty `return` statement.
        example: |-
          assert.equal undefined, noOp true
      - title: identity
        taking: "`any`"
        returning: the given value
        description: >-
          Mostly useful with transformative combinators (like `map`) when you want to leave a value unchanged.
        example: |-
          assert.equal 7, identity 7

      - title: wrap
        taking: "`any`"
        returning: "`function`"
        description: >-
          Returns a function that always returns the given value.
        example: |-
          f = wrap 7
          assert.equal 7, f()

      - title: curry
        taking: "`function`"
        returning: "`function`"
        description: >-
          Convert a function taking N arguments into a function that:
            - given M < N arguments, returns another (curried) function
              taking N - M arguments
            - given N arguments, runs the given function
        example: |-
          multiply = curry (x, y) -> x * y
          double = multiply 2
          assert.equal 8, double 4

      - title: _
        description: >-
          Special value to allow for late-binding of arguments to functions.
          See [substitute](#substitute) and [partial](#partial)

      - title: substitute
        taking: >-
          `into:array`, `from:array`
        returning: "`array`"
        description: >-
          Given two arrays, substitute values from the second array for elements in the first array that have the special value `_`.
        example: |-
          assert.deepEqual [1, 2, 3], substitute [1, _, 3], [2]

      - title: partial
        taking: >-
          `function`, `variadic:any`
        returning: "`function`"
        description: >-
          Take a function and an argument list and return another function that takes its arguments and substiutes them into the argument list (see [substitute](#substitute)).
        example: |-
          {pow} = Math
          square = partial pow, _, 2
          assert.equal 9, square 3

      - title: flip
        taking: "`function`"
        returning: "`function`"
        description: >-
          Flip the arguments of the given function.
        example: |-
          pow = curry flip Math.pow
          square =  pow 2
          assert.equal 9, square 3


- title: Reactive
  module: fairmont-reactive
  description: >-
    Reactive programming functions provide support for reactive programming based on JavaScript iterators, generators, and promises.

  content:

    - title: Iterators
      description: >-
        Iterators are [defined in ES6][]:

        > An object is an iterator when it knows how to access items from a collection one at a time, while keeping track of its current position within that sequence. In JavaScript an iterator is an object that provides a next() method which returns the next item in the sequence. This method returns an object with two properties: done and value.

        In Fairmont, we refer to such an object, in general, as a _product_.

        [defined in ES6]:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators

      content:

        - title: isIterable
          description: >-
            Predicate that returns true if the argument is iterable. That is, if it has a `Symbol.iterator` property or is a generator function.
          taking: "`any`"
          returning: "`boolean`"
          example: |-
            assert.equal true, isIterable [1..5]
